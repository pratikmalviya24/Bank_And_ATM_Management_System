CREATE DATABASE BANK_MANAGEMENT_SYSTEM;
drop DATABASE BANK_MANAGEMENT_SYSTEM;
USE BANK_MANAGEMENT_SYSTEM;


select * from CustomerDetails;
select * from PersonalDetails;
select * from Account;
select * from Transaction;
select * from Card;
select * from Balance;


========= DataBase Tables: ================
create table CustomerDetails(
	mobile_number varchar(20) primary key,
	formno varchar(20),
	name varchar(40),
	father_name varchar(40),
	mother_name varchar(40),
	dob varchar(20),
	gender varchar(10),
	email varchar(50) unique,
	marital_status varchar(10), 
	address varchar(200),
	city varchar(20),
	state varchar(20),
	pin_code varchar(10)
);

create table PersonalDetails(
	mobile_number varchar(20),
	religion varchar(20),
	category varchar(20),
	income varchar(20),
	education varchar(20),
	occupation varchar(40),
	panNumber varchar(20) unique, 
	aadharNumber varchar(50) primary key,
	existingAccount varchar(20),
	senionCitizen varchar(20),
	foreign key (mobile_number) references CustomerDetails(mobile_number)
);


create table Account(
	mobileNumber varchar(15),
	accountType varchar(20),
    accountNumber varchar(20) primary key,
	cardNumber varchar(20),
	pinNumber varchar(10),
	services varchar(200),
	foreign key (mobileNumber) references CustomerDetails(mobile_number)
);





create table Transaction(
	mobileNumber varchar(15),
	date varchar(50),
	type varchar(20),
	amount varchar(20),
    foreign key (mobileNumber) references CustomerDetails(mobile_number)
);

create table Card(
	mobileNumber varchar(15),
	cardNumber varchar(20) primary key,
	pinNumber varchar(10),
	foreign key (mobileNumber) references CustomerDetails(mobile_number)
);

CREATE TABLE Balance(
    accountNumber VARCHAR(20) primary key,
    balance VARCHAR(20)
);









========== Triggers ==============

CREATE TRIGGER isAccountExistTrigger
BEFORE INSERT ON CustomerDetails
FOR EACH ROW
BEGIN
    DECLARE i INT;
    SET i = 0;
    SELECT COUNT(*) INTO i FROM CustomerDetails WHERE mobile_number = NEW.mobile_number;
    IF i > 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Account with this mobile number already exists.';
    END IF;
END//

DELIMITER ;

DELIMITER //
CREATE TRIGGER validateAgeTrigger
BEFORE INSERT ON CustomerDetails
FOR EACH ROW
BEGIN
    DECLARE dob_date DATE;
    DECLARE age INT;
    SET dob_date = STR_TO_DATE(NEW.dob, '%d-%M-%Y');
    SET age = TIMESTAMPDIFF(YEAR, dob_date, CURDATE());
    IF age < 18 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Person must be at least 18 years old to create an account.';
    END IF;
END//
DELIMITER ;

DELIMITER //



insert into CustomerDetails(email) values('93938');

DELIMITER //

CREATE TRIGGER validateEmailFormat
BEFORE INSERT ON CustomerDetails
FOR EACH ROW
BEGIN
    IF NEW.email NOT REGEXP '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}$' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid email format.';
    END IF;
END//



DELIMITER //

CREATE TRIGGER ensureUniquePanNumber
BEFORE INSERT ON PersonalDetails
FOR EACH ROW
BEGIN
    IF EXISTS (SELECT 1 FROM PersonalDetails WHERE panNumber = NEW.panNumber) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'PAN number must be unique.';
    END IF;
END//

DELIMITER //

CREATE TRIGGER ensureUniqueAadharNumber
BEFORE INSERT ON PersonalDetails
FOR EACH ROW
BEGIN
    IF EXISTS (SELECT 1 FROM PersonalDetails WHERE aadharNumber = NEW.aadharNumber) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Aadhar number must be unique.';
    END IF;
END//

DELIMITER ;


DELIMITER //

CREATE PROCEDURE AddTransaction(
    IN mobileNumber_in VARCHAR(15),
    IN transaction_date VARCHAR(50),
    IN transaction_type VARCHAR(20),
    IN transaction_amount DECIMAL(20, 2)
)
BEGIN
    INSERT INTO Transaction VALUES (mobileNumber_in, transaction_date, transaction_type, transaction_amount);
END //

DELIMITER ;
call AddTransaction('7383158862','29-jan-2024','Debited','5000');


DELIMITER //




========== Procedure =============

CREATE PROCEDURE AdminLogin(
    IN adminID_in VARCHAR(30),
    IN password_in VARCHAR(30)
)
BEGIN
    DECLARE count INT;
    SELECT COUNT(*) INTO count FROM admin WHERE adminID = adminID_in AND password = password_in;
    IF count = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid admin credentials.';
    END IF;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE UpdateAccountBalance(
    IN account_number_in VARCHAR(20),
    IN transaction_amount DECIMAL(20, 2)
)
BEGIN
    UPDATE Balance SET balance = balance + transaction_amount WHERE accountNumber = account_number_in;
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You Money Deposited Successfully';
END //

DELIMITER ;

drop procedure UpdateAccountBalance;

DELIMITER //

CREATE PROCEDURE UpdatePinNumber(
    IN card_number_in VARCHAR(20),
    IN new_pin_number VARCHAR(10)
)
BEGIN
    UPDATE Card SET pinNumber = new_pin_number WHERE cardNumber = card_number_in;
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Pin Updates Successfully';
END //

DELIMITER ;










========= Function =======


DELIMITER //
CREATE FUNCTION GetAccountBalance(
    accountNumber_in VARCHAR(20)
)
RETURNS DECIMAL(20, 2)
DETERMINISTIC
BEGIN
    DECLARE balance DECIMAL(20, 2);
    SELECT balance INTO balance FROM Balance WHERE accountNumber = accountNumber_in;
    RETURN balance;
END //

DELIMITER //


DELIMITER //

CREATE FUNCTION GenerateAccountNumber()
RETURNS VARCHAR(20)
DETERMINISTIC
NO SQL
BEGIN
    DECLARE account_number VARCHAR(20);
    SET account_number = CONCAT('ACC-', LPAD(CONVERT(FLOOR(RAND() * 1000000000), CHAR), 10, '0'));
    RETURN account_number;
END //

DELIMITER ;

DELIMITER //

CREATE FUNCTION GenerateCardNumber()
RETURNS VARCHAR(20)
DETERMINISTIC
NO SQL
BEGIN
    DECLARE card_number VARCHAR(20);
    SET card_number = CONCAT('CARD-', LPAD(CONVERT(FLOOR(RAND() * 1000000000), CHAR), 10, '0'));
    RETURN card_number;
END //

DELIMITER ;


CREATE PROCEDURE TransferAmount(
    IN fromAccount VARCHAR(20), 
    IN toAccount VARCHAR(20), 
    IN amount BIGINT
)
BEGIN
    -- Update balance for the source account
    UPDATE Balance 
    SET balance = balance - amount
    WHERE accountNumber = fromAccount;
    
    -- Update balance for the destination account
    UPDATE Balance 
    SET balance = balance + amount
    WHERE accountNumber = toAccount;
END //


DELIMITER //

CREATE PROCEDURE TransferAmount(
    IN fromAccount VARCHAR(20), 
    IN toAccount VARCHAR(20), 
    IN amount BIGINT
)
BEGIN
    -- Update balance for the source account
    UPDATE Balance 
    SET balance = balance - amount
    WHERE accountNumber = fromAccount;

    -- Update balance for the destination account
    UPDATE Balance 
    SET balance = balance + amount
    WHERE accountNumber = toAccount;
    
    
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Money Transfer Successfully!';
END //

DELIMITER ;




-- ========================================================================================
DELIMITER //

CREATE FUNCTION GetCardDetails(
    p_accountNumber VARCHAR(20)
)
RETURNS VARCHAR(255)
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE cardDetails VARCHAR(255);
    DECLARE cur CURSOR FOR 
        SELECT CONCAT('Card Number: ', cardNumber, ', Pin Number: ', pinNumber) AS details
        FROM Card 
        WHERE mobileNumber = (SELECT mobileNumber FROM Account WHERE accountNumber = p_accountNumber);
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    SET cardDetails = '';

    OPEN cur;
    cardLoop: LOOP
        FETCH cur INTO cardDetails;
        IF done THEN
            LEAVE cardLoop;
        END IF;
    END LOOP cardLoop;
    CLOSE cur;

    RETURN cardDetails;
END //

DELIMITER ;

